picea %>%
group_by(BLOCK, PLOT) %>%
summarise(mean.vicary.si = mean(vicary.si, na.rm = TRUE))
#steinman.site
picea <- picea%>%
mutate(steinman.si=mapply(steinman.site, SPP="RS", HT=final.ht, AGE=28))
picea %>%
group_by(BLOCK, PLOT) %>%
summarise(mean.steinman.si = mean(steinman.si, na.rm = TRUE))
#-------------------------------------------------------------------------------
# Top Height/HT40 (vicary height) - (tree or plot level?)
#-------------------------------------------------------------------------------
picea <- picea%>%
mutate(topht=mapply(vicary.height,SPP="RS", age=28, si=vicary.si))
picea %>%
group_by(BLOCK, PLOT) %>%
summarise(spruce.topht = mean(topht, na.rm = TRUE))
#-------------------------------------------------------------------------------
# qmd - (plot level)
#-------------------------------------------------------------------------------
spruce.qmd <- picea %>%
group_by(BLOCK, PLOT) %>%
summarise(qmd = sqrt(sum(DBH.23^2, na.rm = TRUE) / n()), .groups = "drop")
mean(spruce.qmd$qmd)
picea <- picea %>%
left_join(spruce.qmd %>% select(BLOCK, PLOT, qmd),
by = c("BLOCK", "PLOT"))
#-------------------------------------------------------------------------------
# Relative density index - (plot level)
#-------------------------------------------------------------------------------
spruce.rd <- picea %>%
mutate(rdi = mapply(relative.density.index, bapa, qmd))
spruce.rd_summary <- spruce.rd %>%
group_by(BLOCK, PLOT) %>%
summarise(rdi = mean(rdi, na.rm = TRUE))  # Ensure only one value per BLOCK-PLOT
picea <- picea %>%
left_join(spruce.rd_summary, by = c("BLOCK", "PLOT"))
#-------------------------------------------------------------------------------
# Relative spacing - (plot level)
#-------------------------------------------------------------------------------
str(relative.spacing)
picea <- picea %>%
mutate(rs=mapply(relative.spacing,tpa=tpa, domht=topht))
picea %>%
group_by(BLOCK, PLOT) %>%
summarise_at(vars(rs), list(name = mean))
#-------------------------------------------------------------------------------
# Stand density index - (plot level)
#-------------------------------------------------------------------------------
picea <- picea %>%
mutate(sdi=mapply(stand.density.index,tpa=tpa, qmd=qmd))
picea %>%
group_by(BLOCK, PLOT) %>%
summarise_at(vars(sdi), list(name = mean))
xyplot(qmd~tpa|CODE,data=picea)
#-------------------------------------------------------------------------------
# Kozak volume calculation at the individual tree level (ft3)
#-------------------------------------------------------------------------------
require(devtools)
#devtools::install("C:/Users/ashley.lynn.carter/Documents/GitHub/GreenTimbMerch")
require(GreenTimbMerch)
picea$dbh.cm <- picea$DBH.23*2.54
picea$ht.m <- picea$ht.fit/3.28
spruce <- dplyr::filter(picea,SPP=="NS"|SPP=="WS"|SPP=="RS"|SPP=="BS")
spruce$new.vol.m3 <- mapply(KozakTreeVol,'ib',spruce$SPP,spruce$dbh.cm,spruce$ht.m,
Planted=TRUE)
#convert to m3/ha
spruce <- spruce %>%
group_by(BLOCK,PLOT) %>%
mutate(
p.vol.ha = sum(new.vol.m3, na.rm = TRUE) * 10 * 2.47105
)
#convert to ft3/ac
spruce <- spruce %>%
group_by(BLOCK, PLOT) %>%
mutate(
p.vol.ac = p.vol.ha * 14.28
)
#-------------------------------------------------------------------------------
# Variable selection procedures using VSURF package for integer response variable
#-------------------------------------------------------------------------------
require(randomForest)
require(VSURF)
require(caTools)
require(pscl)
spruce$deductclass <- 5*as.integer((spruce$T_DEDUCT+(5/2))/5)
hist(spruce$deductclass,
xlab = "Deduction (%)",
ylab = "Number of Trees",
main = "Distribution of Deduction Classes")
d.set <- spruce
d.set$T_DEDUCT[is.na(d.set$T_DEDUCT)] <- 999
d.set <- dplyr::filter(d.set,T_DEDUCT<998)
#d.set$HT.23[is.na(d.set$HT.23)] <- 0
#d.set <- dplyr::filter(d.set,HT.23>0)
plot(d.set$DBH.23,d.set$HT.23)
names(d.set)
mod3.1 <- zeroinfl(deductclass~rs+sdi+bal+roughness+CODE|sdi+bal+CODE+SPP,
data=d.set,dist="negbin")
summary(mod3.1)
performance(mod3.1)
predictions <- predict(mod3.1, type = "response")
observed <- d.set$deductclass
mb <- mean(observed - predictions)
mab <- mean(abs(observed - predictions))
mb
mab
spruce$fit.deduction <- ifelse(spruce$SPP=="RS"|
spruce$SPP=="WS"|
spruce$SPP=="BS"|
spruce$SPP=="NS",predict(mod3.1,type="response"),0)
spruce$fit.deduct.class <- (5*as.integer((spruce$fit.deduction+(5/2))/5))/100
# will use the modeled reduction
spruce$fit.deduct.class[spruce$fit.deduct.class>1] <- 1
spruce$adj.vol <- spruce$p.vol.ac*spruce$fit.deduct.class
plot(spruce$p.vol.ac,spruce$adj.vol,ylim=c(0,2000),xlim=c(0,2000))
spruce$final.vol <- spruce$p.vol.ac-spruce$adj.vol
#convert final.vol to m3/ha
spruce <- spruce %>%
mutate(final.vol.ha = final.vol * 0.0698)
#needed to average it since orginally calculate at tree-level
final.vol.ha <- spruce %>%
group_by(BLOCK, PLOT) %>%
summarise(final.vol.ha.avg = mean(final.vol.ha, na.rm = TRUE),
.groups = 'drop')
spruce <- spruce %>%
left_join(final.vol.ha, by = c("BLOCK", "PLOT"))
hcb.mod1 <- lm(HCB.23 ~final.ht + DBH.23  + vpdmax + factor(SPP), data = picea)
summary(hcb.mod1)
performance(hcb.mod1)
AIC(hcb.mod4)
hcb.mod4 <- lm(HCB.23 ~final.ht + DBH.23 +factor(SPP) + factor(CODE),data = picea) #log final.ht or DBH.23 did not improve AIC
summary(hcb.mod4)
performance(hcb.mod4)
AIC(hcb.mod1, hcb.mod4) #hcb.mod4 is better model, hcb.mod1 had a higher R2 but also high AIC
rmse <- rmse(hcb.mod4)
print(paste("RMSE:", rmse))
MB <- mean(residuals)
print(paste("Mean Bias (MB):", MB))
MAB <- mean(abs(residuals))
print(paste("Mean Absolute Bias (MAB):", MAB))
# predict hcb.mod4 on all spruce, and join to picea df
picea$hcb.fit <- ifelse(picea$SPP=="RS"|
picea$SPP=="WS"|
picea$SPP=="BS"|
picea$SPP=="NS",predict(hcb.mod4,type="response"),0)
picea$final.hcb <- ifelse(!is.na(picea$HCB.23), picea$HCB.23, picea$hcb.fit)
#-------------------------------------------------------------------------------
# Crown Stratification
#-------------------------------------------------------------------------------
picea$fit.hcb <- predict(hcb.mod4,picea)
spruce.only <- dplyr::filter(picea,SPP=="RS"|SPP=="NS"|SPP=="WS"|SPP=="BS")
spruce.only$HT.23 <- ifelse(is.na(spruce.only$HT.23),spruce.only$final.ht,spruce.only$HT.23)
spruce.only$fit.hcb <- predict(hcb.mod4,spruce.only)
spruce.only$fit.hcb <- ifelse(spruce.only$fit.hcb<0.3,0.3,spruce.only$fit.hcb)
cpi.frame <- spruce.only%>%
group_by(BLOCK,PLOT)%>%
summarize(Top = max(HT.23),
Low = min(fit.hcb))
cpi.frame <- as.data.frame(cpi.frame)
cpi.frame$uid.b <- paste0(cpi.frame$BLOCK,".",cpi.frame$PLOT)
nd <- data.frame(uid.b = rep(c(cpi.frame$uid.b),each=100),
prop = seq(from=0,to=1,length=100))
nd2 <- left_join(nd,cpi.frame)
head(nd2)
names(spruce.only)
al <- spruce.only[c(1:8,12,66:80,87)]
head(al)
pa <- left_join(nd2,al)
head(pa)
pa$top.prop <- (pa$final.ht-pa$Low)/(pa$Top-pa$Low)
pa$bot.prop <- (pa$fit.hcb-pa$Low)/(pa$Top-pa$Low)
pa$crown.point <- ifelse(pa$prop>=pa$bot.prop&pa$prop<=pa$top.prop,1,0)
head(pa)
xyplot(crown.point~DBH.23|SPP,data=pa)
#pa$prop <- as.integer(pa$prop)
cr.demog <- pa%>%
mutate(ef = 10)%>%
group_by(BLOCK,PLOT,SPP,CODE,prop)%>%
summarize(cr.points = sum((crown.point)*10))
COLORS = c("blue", "gold", "red", "green")
xyplot(cr.points~prop|CODE,data=cr.demog,type=c("p","l"),
group=SPP,auto.key=TRUE)
# obviously the spruce only filter doesn't work.. oh well.
ca <- dplyr::filter(cr.demog,cr.points>0&CODE=="RW"|CODE=="NR"|CODE=="NW"|CODE=="BR"|CODE=="BW"|CODE=="BN")
ca <- dplyr::filter(cr.demog, cr.points > 0 &
(CODE %in% c("RW", "NR", "NW", "BR", "BW", "BN")) &
(SPP %in% c("BS", "NS", "RS", "WS")) &
!((SPP %in% c("BS", "WS") & CODE == "NR") |
(SPP %in% c("RS", "WS") & CODE == "BN") |
(SPP %in% c("BS", "NS") & CODE == "RW") |
(SPP %in% c("RS", "NS") & CODE == "BW")))
ca$SPP <- factor(ca$SPP, levels = c("BS", "NS", "RS", "WS"))
xyplot(prop~cr.points|CODE,data=ca,type=c("l"))
ca.avg <- ca %>%
group_by(CODE, SPP, prop) %>%
summarise(cr.points = mean(cr.points, na.rm = TRUE), .groups = "drop")
xyplot(cr.points ~ prop | CODE, data = ca.avg, type = c("l"),
group = SPP, auto.key = list(points = FALSE, lines = TRUE, columns = 2))
xyplot(cr.points ~ prop | CODE,
data = ca.avg,
type = c("l"),
group = SPP,
auto.key = list(points = FALSE, lines = TRUE, columns = 1, title = "Species", space = "right"),
xlab = "Proportion",
ylab = "Crown Points")
ca.avg.smooth <- ca.avg %>%
group_by(CODE, SPP) %>%
do({
smoothed <- smooth.spline(.$prop, .$cr.points, spar = 0.7)
data.frame(prop = smoothed$x, cr.points = pmax(smoothed$y, 0))  # Ensures no negative values
}) %>%
ungroup()
xyplot(prop~cr.points | CODE,
data = ca.avg.smooth,
type = "l",
group = SPP,
auto.key = list(points = FALSE, lines = TRUE, columns = 1, title = "Species", space = "right"),
xlab = "Crown Points",
ylab = "Proportion")
# Area under the curve: to determine is stratification influences LAI or vol
library(car)
interval <- ca.avg.smooth %>%
group_by(CODE, SPP) %>%
summarise(
min_prop = round(min(prop, na.rm = TRUE), 1),
max_prop = round(max(prop, na.rm = TRUE), 1),
range_prop = round(max_prop - min_prop, 1),
.groups = "drop"
)
interval
#fit beta distribution for cr.points use ca dataframe (includes each CODE rep df=2)
library(fitdistrplus)
library(agricolae)
beta <- function(ca) {
ca <- ca[ca$cr.points > 0, ]
fit <- fitdist(ca$prop, "beta", method = "mme")
return(data.frame(alpha = fit$estimate["shape1"], beta = fit$estimate["shape2"]))
}
#-------------------------------------------------------------------------------
# Volume predictions for all treatments
#-------------------------------------------------------------------------------
plot.summary <- spruce %>%
mutate(
ba = DBH.23^2 * 0.005454,
ef = 10,
c.area = (MCW/2)^2*pi,
ht.m = ht.fit/3.28,
dbh.cm = DBH.23*2.54)%>%
group_by(BLOCK, PLOT, CODE) %>%
summarize(
bapa = sum(ba * ef),
tpa = sum(ef),
qmd = qmd(bapa, tpa),
rd = relative.density.index(bapa, qmd),
volume.ha = sum(new.vol.m3*ef*2.47, na.rm = TRUE),
CCF = (sum(c.area*ef, na.rm = TRUE)/43560)*100,
LAI = mean(LAI, na.rm = TRUE))
head(plot.summary)
bl.t <- plot.summary%>%
left_join(.,site)%>%
mutate(baph = bapa/4.356,
tph = tpa*2.47)
head(bl.t)
bl.t <- bl.t %>%
filter(CODE != "C")
names(bl.t)
require(leaps)
modz <- regsubsets(volume.ha~BS_Suitability+WS_Suitability+RS_Suitability+
tri+tpi+roughness+SWI+LAI+
slope+aspect+flowdir+RAD+Winds10+SWI+tmean+ppt+
WD2000+SWC2+Winds10+Winds50+MeanWD+nit+ex.k+dep+ph,
data=bl.t)
summary(modz)
library(MASS)
b <- boxcox(lm(volume.ha ~ 1,data=bl.t))
# Exact lambda
lambda <- b$x[which.max(b$y)]
lambda
plot(density((bl.t$volume.ha)))
plot(density(sqrt(bl.t$volume.ha)))
plot(density(log(bl.t$volume.ha)))
bl.t$sq.vol <- sqrt(bl.t$volume.ha)
modz <- regsubsets(sq.vol~bapa+tpa+qmd+rd+CCF+LAI+BS_Suitability+WS_Suitability+RS_Suitability+
tri+tpi+roughness+SWI+
slope+aspect+flowdir+RAD+Winds10+SWI+tmean+ppt+
WD2000+SWC2+Winds10+Winds50+MeanWD+nit+ex.k+dep+ph,
data=bl.t)
summary(modz)
modz2 <- regsubsets(sq.vol~CCF+LAI+BS_Suitability+WS_Suitability+RS_Suitability+
tri+tpi+roughness+SWI+
slope+aspect+flowdir+RAD+Winds10+SWI+tmean+ppt+
WD2000+SWC2+Winds10+Winds50+MeanWD+nit+ex.k+dep+ph,
data=bl.t)
summary(modz2)
full.m1 <- lm(sq.vol~rd+CODE*aspect, data=bl.t) #LAI was significant prior to additional of structural and density attributes
summary(full.m1)
performance(full.m1)
require(car)
vif(full.m1)
AIC(full.m1)
full.mm <- lme(sq.vol~rd+CODE*aspect,data=bl.t,
random=~1|BLOCK,
na.action="na.omit")
AIC(full.mm,full.m1)
#fit
bl.t$new.fit.vol <- predict(full.m1, bl.t)
bl.t$new.fit.vol <- bl.t$new.fit.vol^2  #back transform sqrt(vol) and predict on dataset
view(bl.t)
library(multcomp)
vol.glht <- glht(full.m1, linfct = mcp(CODE = "Tukey"))
summary(vol.glht, p.adjust.method = "bonferroni")
cld(vol.glht, level = 0.05, decreasing = TRUE)
# volume is transformed (sqrt)
library(ggplot2)
library(ggeffects)
mydf2 <- ggpredict(full.m1,terms=c("rd","CODE","aspect"))
library(ggplot2)
ggplot(mydf2,aes(x=x,y=predicted,colour=group))+
geom_line(aes(linetype=group,color=group),size=1)+
#labs(x="Tree height (m)",y="Probabilty of sinuosity (%)")+
#ylim(0,55)+
#xlim(4,6)+
facet_wrap(~facet)+
theme_bw(18)
#back transform volume
mydf2 <- ggpredict(full.m1, terms = c("rd", "CODE", "aspect"))
# Back-transform from square root
mydf2$predicted <- mydf2$predicted^2
mydf2$conf.low <- mydf2$conf.low^2
mydf2$conf.high <- mydf2$conf.high^2
ggplot(mydf2, aes(x = x, y = predicted, colour = group)) +
geom_line(aes(linetype = group, color = group), size = 1) +
facet_wrap(~facet) +
ggtitle(expression(paste("Aspect (", degree, ")"))) +
labs(
x = "Relative Density (%)",
y = expression(paste("Volume (", m^3, " ", ha^-1, ")")),
colour = "Treatment",
linetype = "Treatment"
) +
coord_cartesian(ylim = c(0, 215)) +
theme_bw(18) +
theme(
plot.title = element_text(hjust = 0.5)  # centers the title
)
#-------------------------------------------------------------------------------
# Overyielding & Transgressive Overyielding, looking at the plot level
#-------------------------------------------------------------------------------
plot.estimates <- spruce %>%
group_by(BLOCK, PLOT, CODE) %>%
summarise(total.vol = sum(p.vol.ac, na.rm = TRUE) / 10,
.groups = 'drop')
# calculate overyielding at plot level
# deduction volume
oy <- function(data) {
results <- data.frame(Mixture = character(), Overyielding = numeric(), stringsAsFactors = FALSE)
for (i in 1:nrow(data)) {
mixture <- as.character(data$CODE[i])  # make CODE a character
if (nchar(mixture) == 2) {
species1 <- substr(mixture, 1, 1)
species2 <- substr(mixture, 2, 2)
volume1 <- data$total.vol[data$CODE == species1]
volume2 <- data$total.vol[data$CODE == species2]
mixture.volume <- data$total.vol[i]
if (length(volume1) > 0 && length(volume2) > 0) {
average.volume <- mean(c(volume1, volume2), na.rm = TRUE)
overyielding <- mixture.volume / average.volume
results <- rbind(results, data.frame(Mixture = mixture, Overyielding = overyielding))
}
}
}
return(results)
}
oy.results <- oy(plot.estimates)
print(oy.results)
avg.oy <- oy.results %>%
group_by(Mixture) %>%
summarise(
avg.oy = mean(Overyielding, na.rm = TRUE),
se.oy = sd(Overyielding, na.rm = TRUE) / sqrt(n()),
.groups = 'drop'
)
print(avg.oy)
ggplot(avg.oy, aes(x = Mixture, y = avg.oy)) +
geom_bar(stat = "identity", fill = "grey") +
geom_errorbar(aes(ymin = avg.oy - se.oy, ymax = avg.oy + se.oy), width = 0.2) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(x = "Species Mixture", y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = c(1))
# calculate transgressive overyielding
calculate_transgressive_overyielding <- function(data) {
results <- data.frame(Mixture = character(), Transgressive_Overyielding = numeric(), stringsAsFactors = FALSE)
for (i in 1:nrow(data)) {
mixture <- as.character(data$CODE[i])
if (nchar(mixture) == 2) {
species1 <- substr(mixture, 1, 1)
species2 <- substr(mixture, 2, 2)
volume1 <- data$total.vol[data$CODE == species1]
volume2 <- data$total.vol[data$CODE == species2]
mixture_volume <- data$total.vol[i]
if (length(volume1) > 0 && length(volume2) > 0) {
max_volume <- max(c(volume1, volume2), na.rm = TRUE)
if (!is.na(max_volume) && max_volume > 0) {
transgressive_overyielding <- mixture_volume / max_volume
results <- rbind(results, data.frame(Mixture = mixture, Transgressive_Overyielding = transgressive_overyielding))
}
}
}
}
return(results)
}
toy_results <- calculate_transgressive_overyielding(plot.estimates)
print(toy_results)
avg_toy <- toy_results %>%
group_by(Mixture) %>%
summarise(
avg_transgressive_oy = mean(Transgressive_Overyielding, na.rm = TRUE),
se_transgressive_oy = sd(Transgressive_Overyielding, na.rm = TRUE) / sqrt(n())
)
print(avg_toy)
ggplot(avg_toy, aes(x = Mixture, y = avg_transgressive_oy)) +
geom_bar(stat = "identity", fill = "grey") +
geom_errorbar(aes(ymin = avg_transgressive_oy - se_transgressive_oy,
ymax = avg_transgressive_oy + se_transgressive_oy),
width = 0.2) +  # Add error bars
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(x = "Species Mixture", y = NULL) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(breaks = c(1))
#-------------------------------------------------------------------------------
# Multiple Comparisons Test of Stand Level Metrics
# Post-hoc tukey HSD comparison for plot-level metrics
#-------------------------------------------------------------------------------
library(ggplot2)
library(dplyr)
hcb.mod1 <- lm(HCB.23 ~final.ht + DBH.23  + vpdmax + factor(SPP), data = picea)
summary(hcb.mod1)
performance(hcb.mod1)
AIC(hcb.mod4)
hcb.mod4 <- lm(HCB.23 ~final.ht + DBH.23 +factor(SPP) + factor(CODE),data = picea) #log final.ht or DBH.23 did not improve AIC
summary(hcb.mod4)
library(multcomp)
vol.glht <- glht(full.m1, linfct = mcp(CODE = "Tukey"))
summary(vol.glht, p.adjust.method = "bonferroni")
cld(vol.glht, level = 0.05, decreasing = TRUE)
# volume is transformed (sqrt)
library(ggplot2)
library(ggeffects)
mydf2 <- ggpredict(full.m1,terms=c("rd","CODE","aspect"))
library(ggplot2)
ggplot(mydf2,aes(x=x,y=predicted,colour=group))+
geom_line(aes(linetype=group,color=group),size=1)+
#labs(x="Tree height (m)",y="Probabilty of sinuosity (%)")+
#ylim(0,55)+
#xlim(4,6)+
facet_wrap(~facet)+
theme_bw(18)
#back transform volume
mydf2 <- ggpredict(full.m1, terms = c("rd", "CODE", "aspect"))
# Back-transform from square root
mydf2$predicted <- mydf2$predicted^2
mydf2$conf.low <- mydf2$conf.low^2
mydf2$conf.high <- mydf2$conf.high^2
ggplot(mydf2, aes(x = x, y = predicted, colour = group)) +
geom_line(aes(linetype = group, color = group), size = 1) +
facet_wrap(~facet) +
ggtitle(expression(paste("Aspect (", degree, ")"))) +
labs(
x = "Relative Density (%)",
y = expression(paste("Volume (", m^3, " ", ha^-1, ")")),
colour = "Treatment",
linetype = "Treatment"
) +
coord_cartesian(ylim = c(0, 215)) +
theme_bw(18) +
theme(
plot.title = element_text(hjust = 0.5)  # centers the title
)
ggplot(mydf2, aes(x = x, y = predicted, colour = group)) +
geom_line(aes(linetype = group, color = group), size = 1) +
facet_wrap(~facet) +
ggtitle(expression(paste("Aspect (", degree, ")"))) +
labs(
x = "Relative Density (%)",
y = expression(paste("Volume (", m^3, " ", ha^-1, ")")),
colour = "Treatment",
linetype = "Treatment"
) +
coord_cartesian(ylim = c(0, 350)) +
theme_bw(18) +
theme(
plot.title = element_text(hjust = 0.5)  # centers the title
)
ggplot(mydf2, aes(x = x, y = predicted, colour = group)) +
geom_line(aes(linetype = group, color = group), size = 1) +
facet_wrap(~facet) +
ggtitle(expression(paste("Aspect (", degree, ")"))) +
labs(
x = "Relative Density (%)",
y = expression(paste("Volume (", m^3, " ", ha^-1, ")")),
colour = "Treatment",
linetype = "Treatment"
) +
coord_cartesian(ylim = c(0, 300)) +
theme_bw(18) +
theme(
plot.title = element_text(hjust = 0.5)  # centers the title
)
